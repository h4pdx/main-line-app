@page "/arrival-details"

<PageTitle>ArrivalDetails</PageTitle>

@using MainLine.Data
@using MainLine.Data.Services
@inject IArrivalService _arrivalService;

<style scoped>
    .arrival-details {
        justify-content: left;
        padding: 10px !important;
        padding-left: 10px;
    }
    .arrival-icon {
        width: 40px;
        flex-shrink: 0;
        text-align: center;
    }
    .arrival-time {
        margin-left: auto !important;
    }
</style>

<div class="row">
    <div class="col">
        @if (Arrival.Rn != 0)
        {
            <small>@Arrival.Rt.GetTrainLineName() #@GetLineNumberFormatted(Arrival.Rn) to</small>
        }
        <div class="arrival-details d-flex flex-row flex-fill p-0 align-items-center text text-light" style="background-color: @Arrival.Rt.GetTrainLineColor()"> 
            <span class="fs-2">@Arrival.DestNm</span>
            <span class="fs-3 arrival-time">@arrivalTime</span>
            <span class="arrival-icon material-symbols-outlined">@arrivalIcon</span>
        </div>
        <p class="mb-0">@Arrival.StpDe</p>
        <hr />
    </div>
</div>

@code {
    [Parameter]
    public Eta Arrival { get; set; }

    public string arrivalTime => GetArrivalTime(Arrival.ArrT);
    public string arrivalIcon => Arrival.IsSch == 0 ? "rss_feed" : "schedule";

    private string GetArrivalTime(DateTime arrivalTime)
    {
        var timeSpan = arrivalTime - DateTime.Now;
        var minutesUntilArrival = (int)timeSpan.TotalMinutes;
        var due = Arrival.IsApp == 1 ? "Due" : "<1 min";
        return (minutesUntilArrival > 0 ? $"{minutesUntilArrival} min" : due);
    }

    private string GetLineNumberFormatted(int lineNumber)
        => lineNumber switch
        {
            (< 10) => $"00{lineNumber}",
            (< 100) => $"0{lineNumber}",
            _ => $"{lineNumber}"
        };
}
